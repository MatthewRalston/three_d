	<script src="webgl/PC123/CanvasMatrix.js" type="text/javascript"></script>
	<canvas id="textureCanvas" style="display: none;" width="256" height="256">
        <img src="webgl/PC123/snapshot.png" alt="snapshot" width=257/><br>
	Your browser does not support the HTML5 canvas element.</canvas>

	<!-- ****** lines object 396 ****** -->
	<script id="vshader396" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader396" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** lines object 397 ****** -->
	<script id="vshader397" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader397" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** lines object 398 ****** -->
	<script id="vshader398" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader398" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** lines object 399 ****** -->
	<script id="vshader399" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader399" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** lines object 400 ****** -->
	<script id="vshader400" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader400" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** lines object 401 ****** -->
	<script id="vshader401" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	void main(void) {
	  vPosition = mvMatrix * vec4(aPos, 1.);
	  gl_Position = prMatrix * vPosition;
	  vCol = aCol;
	}
	</script>

	<script id="fshader401" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  gl_FragColor = lighteffect;
	}
	</script> 

	<!-- ****** text object 402 ****** -->
	<script id="vshader402" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	attribute vec2 aTexcoord;
	varying vec2 vTexcoord;
	attribute vec2 aOfs;
	void main(void) {
	  vCol = aCol;
	  vTexcoord = aTexcoord;
	  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);
	  pos = pos/pos.w;
	  gl_Position = pos + vec4(aOfs, 0.,0.);
	}
	</script>

	<script id="fshader402" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	varying vec2 vTexcoord;
	uniform sampler2D uSampler;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);
	  if (textureColor.a < 0.1)
	    discard;
	  else
	    gl_FragColor = textureColor;
	}
	</script> 

	<!-- ****** text object 403 ****** -->
	<script id="vshader403" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	attribute vec2 aTexcoord;
	varying vec2 vTexcoord;
	attribute vec2 aOfs;
	void main(void) {
	  vCol = aCol;
	  vTexcoord = aTexcoord;
	  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);
	  pos = pos/pos.w;
	  gl_Position = pos + vec4(aOfs, 0.,0.);
	}
	</script>

	<script id="fshader403" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	varying vec2 vTexcoord;
	uniform sampler2D uSampler;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);
	  if (textureColor.a < 0.1)
	    discard;
	  else
	    gl_FragColor = textureColor;
	}
	</script> 

	<!-- ****** text object 404 ****** -->
	<script id="vshader404" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	attribute vec2 aTexcoord;
	varying vec2 vTexcoord;
	attribute vec2 aOfs;
	void main(void) {
	  vCol = aCol;
	  vTexcoord = aTexcoord;
	  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);
	  pos = pos/pos.w;
	  gl_Position = pos + vec4(aOfs, 0.,0.);
	}
	</script>

	<script id="fshader404" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	varying vec2 vTexcoord;
	uniform sampler2D uSampler;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);
	  if (textureColor.a < 0.1)
	    discard;
	  else
	    gl_FragColor = textureColor;
	}
	</script> 

	<!-- ****** text object 405 ****** -->
	<script id="vshader405" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	attribute vec2 aTexcoord;
	varying vec2 vTexcoord;
	attribute vec2 aOfs;
	void main(void) {
	  vCol = aCol;
	  vTexcoord = aTexcoord;
	  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);
	  pos = pos/pos.w;
	  gl_Position = pos + vec4(aOfs, 0.,0.);
	}
	</script>

	<script id="fshader405" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	varying vec2 vTexcoord;
	uniform sampler2D uSampler;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);
	  if (textureColor.a < 0.1)
	    discard;
	  else
	    gl_FragColor = textureColor;
	}
	</script> 

	<!-- ****** text object 406 ****** -->
	<script id="vshader406" type="x-shader/x-vertex">
	attribute vec3 aPos;
	attribute vec4 aCol;
	uniform mat4 mvMatrix;
	uniform mat4 prMatrix;
	varying vec4 vCol;
	varying vec4 vPosition;
	attribute vec2 aTexcoord;
	varying vec2 vTexcoord;
	attribute vec2 aOfs;
	void main(void) {
	  vCol = aCol;
	  vTexcoord = aTexcoord;
	  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);
	  pos = pos/pos.w;
	  gl_Position = pos + vec4(aOfs, 0.,0.);
	}
	</script>

	<script id="fshader406" type="x-shader/x-fragment"> 
	#ifdef GL_ES
	precision highp float;
	#endif
	varying vec4 vCol; // carries alpha
	varying vec4 vPosition;
	varying vec2 vTexcoord;
	uniform sampler2D uSampler;
	void main(void) {
      vec4 colDiff = vCol;
	  vec4 lighteffect = colDiff;
	  vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);
	  if (textureColor.a < 0.1)
	    discard;
	  else
	    gl_FragColor = textureColor;
	}
	</script> 


	<script type="text/javascript"> 

	function getShader ( gl, id ){
	   var shaderScript = document.getElementById ( id );
	   var str = "";
	   var k = shaderScript.firstChild;
	   while ( k ){
	     if ( k.nodeType == 3 ) str += k.textContent;
	     k = k.nextSibling;
	   }
	   var shader;
	   if ( shaderScript.type == "x-shader/x-fragment" )
             shader = gl.createShader ( gl.FRAGMENT_SHADER );
	   else if ( shaderScript.type == "x-shader/x-vertex" )
             shader = gl.createShader(gl.VERTEX_SHADER);
	   else return null;
	   gl.shaderSource(shader, str);
	   gl.compileShader(shader);
	   if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0)
	     alert(gl.getShaderInfoLog(shader));
	   return shader;
	}

	var min = Math.min;
	var max = Math.max;
	var sqrt = Math.sqrt;
	var sin = Math.sin;
	var acos = Math.acos;
	var tan = Math.tan;
	var SQRT2 = Math.SQRT2;
	var PI = Math.PI;
	var log = Math.log;
	var exp = Math.exp;

	function PC123Start() {
	   var debug = function(msg) {
	     document.getElementById("debug").innerHTML = msg;
	   }
	   debug("");

	   var canvas = document.getElementById("PC123");
	   if (!window.WebGLRenderingContext){
	     debug("<img src=\"webgl/PC123/snapshot.png\" alt=\"snapshot\" width=257/><br> Your browser does not support WebGL. See <a href=\"http://get.webgl.org\">http://get.webgl.org</a>");
	     return;
	   }
	   var gl;
	   try {
	     // Try to grab the standard context. If it fails, fallback to experimental.
	     gl = canvas.getContext("webgl") 
	       || canvas.getContext("experimental-webgl");
	   }
	   catch(e) {}
	   if ( !gl ) {
	     debug("<img src=\"webgl/PC123/snapshot.png\" alt=\"snapshot\" width=257/><br> Your browser appears to support WebGL, but did not create a WebGL context.  See <a href=\"http://get.webgl.org\">http://get.webgl.org</a>");
	     return;
	   }
	   var width = 257;  var height = 257;
	   canvas.width = width;   canvas.height = height;
	   gl.viewport(0, 0, width, height);
	   var prMatrix = new CanvasMatrix4();
	   var mvMatrix = new CanvasMatrix4();
	   var normMatrix = new CanvasMatrix4();
	   var saveMat = new CanvasMatrix4();
	   saveMat.makeIdentity();
	   var distance;
	   var posLoc = 0;
	   var colLoc = 1;

	   var zoom = 1;
	   var fov = 60;
	   var userMatrix = new CanvasMatrix4();
	   userMatrix.load([
	    1, 0, 1.748456e-07, 0,
	    0, 1, 0, 0,
	    -1.748456e-07, 0, 1, 0,
	    0, 0, 0, 1
		]);
	   function getPowerOfTwo(value) {
	     var pow = 1;
	     while(pow<value) {
	       pow *= 2;
	     }
	     return pow;
	   }

	   function handleLoadedTexture(texture, textureCanvas) {
	     gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

	     gl.bindTexture(gl.TEXTURE_2D, texture);
	     gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCanvas);
	     gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	     gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
	     gl.generateMipmap(gl.TEXTURE_2D);

	     gl.bindTexture(gl.TEXTURE_2D, null);
	   }
	   
	   function loadImageToTexture(filename, texture) {   
	     var canvas = document.getElementById("textureCanvas");
	     var ctx = canvas.getContext("2d");
	     var image = new Image();
	     
	     image.onload = function() {
	       var w = image.width;
	       var h = image.height;
	       var canvasX = getPowerOfTwo(w);
	       var canvasY = getPowerOfTwo(h);
	       canvas.width = canvasX;
	       canvas.height = canvasY;
	       ctx.imageSmoothingEnabled = true;
	       ctx.drawImage(image, 0, 0, canvasX, canvasY);
	       handleLoadedTexture(texture, canvas);
   	       drawScene();
	     }
	     image.src = filename;
	   }  	   

	   function drawTextToCanvas(text, cex) {
	     var canvasX, canvasY;
	     var textX, textY;

	     var textHeight = 20 * cex;
	     var textColour = "white";
	     var fontFamily = "Arial";

	     var backgroundColour = "rgba(0,0,0,0)";

	     var canvas = document.getElementById("textureCanvas");
	     var ctx = canvas.getContext("2d");

	     ctx.font = textHeight+"px "+fontFamily;

             canvasX = 1;
             var widths = [];
	     for (var i = 0; i < text.length; i++)  {
	       widths[i] = ctx.measureText(text[i]).width;
	       canvasX = (widths[i] > canvasX) ? widths[i] : canvasX;
	     }	  
	     canvasX = getPowerOfTwo(canvasX);

	     var offset = 2*textHeight; // offset to first baseline
	     var skip = 2*textHeight;   // skip between baselines	  
	     canvasY = getPowerOfTwo(offset + text.length*skip);
	     
	     canvas.width = canvasX;
	     canvas.height = canvasY;

	     ctx.fillStyle = backgroundColour;
	     ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

	     ctx.fillStyle = textColour;
	     ctx.textAlign = "left";

	     ctx.textBaseline = "alphabetic";
	     ctx.font = textHeight+"px "+fontFamily;

	     for(var i = 0; i < text.length; i++) {
	       textY = i*skip + offset;
	       ctx.fillText(text[i], 0,  textY);
	     }
	     return {canvasX:canvasX, canvasY:canvasY,
	             widths:widths, textHeight:textHeight,
	             offset:offset, skip:skip};
	   }


	   // ****** lines object 396 ******
	   var prog396  = gl.createProgram();
	   gl.attachShader(prog396, getShader( gl, "vshader396" ));
	   gl.attachShader(prog396, getShader( gl, "fshader396" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog396, 0, "aPos");
	   gl.bindAttribLocation(prog396, 1, "aCol");
	   gl.linkProgram(prog396);
	   var v=new Float32Array([
	    0, 0, 0,
	    -0.1792547, -0.2832125, 0.002440035,
	    0, 0, 0,
	    -0.186663, 0.01358468, 0.06140247,
	    0, 0, 0,
	    -0.1857435, 0.01038708, 0.2522451,
	    0, 0, 0,
	    -0.1873457, -0.1783821, -0.04883457,
	    0, 0, 0,
	    -0.1828468, -0.1863621, 0.04543195,
	    0, 0, 0,
	    -0.1835383, -0.1500202, 0.1274461,
	    0, 0, 0,
	    -0.1657072, -0.373303, -0.06867101,
	    0, 0, 0,
	    -0.1816251, -0.1646695, -0.02200669,
	    0, 0, 0,
	    -0.1601792, -0.4028993, -0.06745552,
	    0, 0, 0,
	    -0.1739189, -0.3261086, -0.04662345
	   ]);
	   var buf396 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf396);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc396 = gl.getUniformLocation(prog396,"mvMatrix");
	   var prMatLoc396 = gl.getUniformLocation(prog396,"prMatrix");


	   // ****** lines object 397 ******
	   var prog397  = gl.createProgram();
	   gl.attachShader(prog397, getShader( gl, "vshader397" ));
	   gl.attachShader(prog397, getShader( gl, "fshader397" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog397, 0, "aPos");
	   gl.bindAttribLocation(prog397, 1, "aCol");
	   gl.linkProgram(prog397);
	   var v=new Float32Array([
	    0, 0, 0,
	    -0.1901146, -0.07575649, -0.02662876,
	    0, 0, 0,
	    -0.1904684, 0.06319205, -0.09522427,
	    0, 0, 0,
	    -0.1813192, 0.1488223, -0.1580695,
	    0, 0, 0,
	    -0.1913257, 0.06433903, -0.05506859,
	    0, 0, 0,
	    -0.1902181, 0.04331673, -0.1083064,
	    0, 0, 0,
	    -0.1910684, 0.02087806, 0.06225371,
	    0, 0, 0,
	    -0.1897004, 0.05820021, 0.08940019,
	    0, 0, 0,
	    -0.1708824, 0.2403186, -0.4091152,
	    0, 0, 0,
	    -0.1829262, 0.07288504, -0.2929957,
	    0, 0, 0,
	    -0.1838171, 0.09279016, -0.3019157
	   ]);
	   var buf397 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf397);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc397 = gl.getUniformLocation(prog397,"mvMatrix");
	   var prMatLoc397 = gl.getUniformLocation(prog397,"prMatrix");


	   // ****** lines object 398 ******
	   var prog398  = gl.createProgram();
	   gl.attachShader(prog398, getShader( gl, "vshader398" ));
	   gl.attachShader(prog398, getShader( gl, "fshader398" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog398, 0, "aPos");
	   gl.bindAttribLocation(prog398, 1, "aCol");
	   gl.linkProgram(prog398);
	   var v=new Float32Array([
	    0, 0, 0,
	    -0.191344, 0.01779264, 0.1017702,
	    0, 0, 0,
	    -0.1803588, 0.1738003, 0.3425521,
	    0, 0, 0,
	    -0.1688205, 0.3252231, -0.07980964,
	    0, 0, 0,
	    -0.1745261, 0.1735139, 0.4439855,
	    0, 0, 0,
	    -0.1838226, 0.1456563, -0.06704764,
	    0, 0, 0,
	    -0.1873096, 0.05998985, -0.02587693,
	    0, 0, 0,
	    -0.1861043, 0.1772536, 0.1465895,
	    0, 0, 0,
	    -0.179266, 0.2248265, -0.1118883,
	    0, 0, 0,
	    -0.183036, 0.04026933, 0.3456866,
	    0, 0, 0,
	    -0.1888716, -0.08425307, -0.065947
	   ]);
	   var buf398 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf398);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc398 = gl.getUniformLocation(prog398,"mvMatrix");
	   var prMatLoc398 = gl.getUniformLocation(prog398,"prMatrix");


	   // ****** lines object 399 ******
	   var prog399  = gl.createProgram();
	   gl.attachShader(prog399, getShader( gl, "vshader399" ));
	   gl.attachShader(prog399, getShader( gl, "fshader399" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog399, 0, "aPos");
	   gl.bindAttribLocation(prog399, 1, "aCol");
	   gl.linkProgram(prog399);
	   var v=new Float32Array([
	    -0.15, -0.4138212, -0.4219117,
	    0, -0.4138212, -0.4219117,
	    -0.15, -0.4138212, -0.4219117,
	    -0.15, -0.4325703, -0.443879,
	    -0.1, -0.4138212, -0.4219117,
	    -0.1, -0.4325703, -0.443879,
	    -0.05, -0.4138212, -0.4219117,
	    -0.05, -0.4325703, -0.443879,
	    0, -0.4138212, -0.4219117,
	    0, -0.4325703, -0.443879
	   ]);
	   var buf399 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf399);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc399 = gl.getUniformLocation(prog399,"mvMatrix");
	   var prMatLoc399 = gl.getUniformLocation(prog399,"prMatrix");


	   // ****** lines object 400 ******
	   var prog400  = gl.createProgram();
	   gl.attachShader(prog400, getShader( gl, "vshader400" ));
	   gl.attachShader(prog400, getShader( gl, "fshader400" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog400, 0, "aPos");
	   gl.bindAttribLocation(prog400, 1, "aCol");
	   gl.linkProgram(prog400);
	   var v=new Float32Array([
	    -0.1942142, -0.4, -0.4219117,
	    -0.1942142, 0.2, -0.4219117,
	    -0.1942142, -0.4, -0.4219117,
	    -0.1991413, -0.4, -0.443879,
	    -0.1942142, -0.2, -0.4219117,
	    -0.1991413, -0.2, -0.443879,
	    -0.1942142, 0, -0.4219117,
	    -0.1991413, 0, -0.443879,
	    -0.1942142, 0.2, -0.4219117,
	    -0.1991413, 0.2, -0.443879
	   ]);
	   var buf400 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf400);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc400 = gl.getUniformLocation(prog400,"mvMatrix");
	   var prMatLoc400 = gl.getUniformLocation(prog400,"prMatrix");


	   // ****** lines object 401 ******
	   var prog401  = gl.createProgram();
	   gl.attachShader(prog401, getShader( gl, "vshader401" ));
	   gl.attachShader(prog401, getShader( gl, "fshader401" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog401, 0, "aPos");
	   gl.bindAttribLocation(prog401, 1, "aCol");
	   gl.linkProgram(prog401);
	   var v=new Float32Array([
	    -0.1942142, -0.4138212, -0.4,
	    -0.1942142, -0.4138212, 0.4,
	    -0.1942142, -0.4138212, -0.4,
	    -0.1991413, -0.4325703, -0.4,
	    -0.1942142, -0.4138212, -0.2,
	    -0.1991413, -0.4325703, -0.2,
	    -0.1942142, -0.4138212, 0,
	    -0.1991413, -0.4325703, 0,
	    -0.1942142, -0.4138212, 0.2,
	    -0.1991413, -0.4325703, 0.2,
	    -0.1942142, -0.4138212, 0.4,
	    -0.1991413, -0.4325703, 0.4
	   ]);
	   var buf401 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf401);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var mvMatLoc401 = gl.getUniformLocation(prog401,"mvMatrix");
	   var prMatLoc401 = gl.getUniformLocation(prog401,"prMatrix");


	   // ****** text object 402 ******
	   var prog402  = gl.createProgram();
	   gl.attachShader(prog402, getShader( gl, "vshader402" ));
	   gl.attachShader(prog402, getShader( gl, "fshader402" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog402, 0, "aPos");
	   gl.bindAttribLocation(prog402, 1, "aCol");
	   gl.linkProgram(prog402);
	   var texts = [
	    ""
	   ];
	   var texinfo = drawTextToCanvas(texts, 1);	 
	   var canvasX402 = texinfo.canvasX;
	   var canvasY402 = texinfo.canvasY;
	   var ofsLoc402 = gl.getAttribLocation(prog402, "aOfs");
	   var texture402 = gl.createTexture();
	   var texLoc402 = gl.getAttribLocation(prog402, "aTexcoord");
	   var sampler402 = gl.getUniformLocation(prog402,"uSampler");
    	   handleLoadedTexture(texture402, document.getElementById("textureCanvas"));
	   var v=new Float32Array([
	    -0.095672, 0.4486399, 0.5885861, 0, -0.5, 0.5, 0.5,
	    -0.095672, 0.4486399, 0.5885861, 1, -0.5, 0.5, 0.5,
	    -0.095672, 0.4486399, 0.5885861, 1, 1.5, 0.5, 0.5,
	    -0.095672, 0.4486399, 0.5885861, 0, 1.5, 0.5, 0.5
	   ]);
	   for (var i=0; i<1; i++) 
	     for (var j=0; j<4; j++) {
	         ind = 7*(4*i + j) + 3;
	         v[ind+2] = 2*(v[ind]-v[ind+2])*texinfo.widths[i]/width;
	         v[ind+3] = 2*(v[ind+1]-v[ind+3])*texinfo.textHeight/height;
	         v[ind] *= texinfo.widths[i]/texinfo.canvasX;
	         v[ind+1] = 1.0-(texinfo.offset + i*texinfo.skip 
	           - v[ind+1]*texinfo.textHeight)/texinfo.canvasY;
	     }
	   var f=new Uint16Array([
	    0, 1, 2, 0, 2, 3
	   ]);
	   var buf402 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf402);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var ibuf402 = gl.createBuffer();
	   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf402);
	   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, f, gl.STATIC_DRAW);
	   var mvMatLoc402 = gl.getUniformLocation(prog402,"mvMatrix");
	   var prMatLoc402 = gl.getUniformLocation(prog402,"prMatrix");


	   // ****** text object 403 ******
	   var prog403  = gl.createProgram();
	   gl.attachShader(prog403, getShader( gl, "vshader403" ));
	   gl.attachShader(prog403, getShader( gl, "fshader403" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog403, 0, "aPos");
	   gl.bindAttribLocation(prog403, 1, "aCol");
	   gl.linkProgram(prog403);
	   var texts = [
	    ""
	   ];
	   var texinfo = drawTextToCanvas(texts, 1);	 
	   var canvasX403 = texinfo.canvasX;
	   var canvasY403 = texinfo.canvasY;
	   var ofsLoc403 = gl.getAttribLocation(prog403, "aOfs");
	   var texture403 = gl.createTexture();
	   var texLoc403 = gl.getAttribLocation(prog403, "aTexcoord");
	   var sampler403 = gl.getUniformLocation(prog403,"uSampler");
    	   handleLoadedTexture(texture403, document.getElementById("textureCanvas"));
	   var v=new Float32Array([
	    -0.095672, -0.5825635, -0.6196178, 0, -0.5, 0.5, 0.5,
	    -0.095672, -0.5825635, -0.6196178, 1, -0.5, 0.5, 0.5,
	    -0.095672, -0.5825635, -0.6196178, 1, 1.5, 0.5, 0.5,
	    -0.095672, -0.5825635, -0.6196178, 0, 1.5, 0.5, 0.5
	   ]);
	   for (var i=0; i<1; i++) 
	     for (var j=0; j<4; j++) {
	         ind = 7*(4*i + j) + 3;
	         v[ind+2] = 2*(v[ind]-v[ind+2])*texinfo.widths[i]/width;
	         v[ind+3] = 2*(v[ind+1]-v[ind+3])*texinfo.textHeight/height;
	         v[ind] *= texinfo.widths[i]/texinfo.canvasX;
	         v[ind+1] = 1.0-(texinfo.offset + i*texinfo.skip 
	           - v[ind+1]*texinfo.textHeight)/texinfo.canvasY;
	     }
	   var f=new Uint16Array([
	    0, 1, 2, 0, 2, 3
	   ]);
	   var buf403 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf403);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var ibuf403 = gl.createBuffer();
	   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf403);
	   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, f, gl.STATIC_DRAW);
	   var mvMatLoc403 = gl.getUniformLocation(prog403,"mvMatrix");
	   var prMatLoc403 = gl.getUniformLocation(prog403,"prMatrix");


	   // ****** text object 404 ******
	   var prog404  = gl.createProgram();
	   gl.attachShader(prog404, getShader( gl, "vshader404" ));
	   gl.attachShader(prog404, getShader( gl, "fshader404" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog404, 0, "aPos");
	   gl.bindAttribLocation(prog404, 1, "aCol");
	   gl.linkProgram(prog404);
	   var texts = [
	    "x"
	   ];
	   var texinfo = drawTextToCanvas(texts, 1);	 
	   var canvasX404 = texinfo.canvasX;
	   var canvasY404 = texinfo.canvasY;
	   var ofsLoc404 = gl.getAttribLocation(prog404, "aOfs");
	   var texture404 = gl.createTexture();
	   var texLoc404 = gl.getAttribLocation(prog404, "aTexcoord");
	   var sampler404 = gl.getUniformLocation(prog404,"uSampler");
    	   handleLoadedTexture(texture404, document.getElementById("textureCanvas"));
	   var v=new Float32Array([
	    -0.095672, -0.5263161, -0.5537158, 0, -0.5, 0.5, 0.5,
	    -0.095672, -0.5263161, -0.5537158, 1, -0.5, 0.5, 0.5,
	    -0.095672, -0.5263161, -0.5537158, 1, 1.5, 0.5, 0.5,
	    -0.095672, -0.5263161, -0.5537158, 0, 1.5, 0.5, 0.5
	   ]);
	   for (var i=0; i<1; i++) 
	     for (var j=0; j<4; j++) {
	         ind = 7*(4*i + j) + 3;
	         v[ind+2] = 2*(v[ind]-v[ind+2])*texinfo.widths[i]/width;
	         v[ind+3] = 2*(v[ind+1]-v[ind+3])*texinfo.textHeight/height;
	         v[ind] *= texinfo.widths[i]/texinfo.canvasX;
	         v[ind+1] = 1.0-(texinfo.offset + i*texinfo.skip 
	           - v[ind+1]*texinfo.textHeight)/texinfo.canvasY;
	     }
	   var f=new Uint16Array([
	    0, 1, 2, 0, 2, 3
	   ]);
	   var buf404 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf404);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var ibuf404 = gl.createBuffer();
	   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf404);
	   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, f, gl.STATIC_DRAW);
	   var mvMatLoc404 = gl.getUniformLocation(prog404,"mvMatrix");
	   var prMatLoc404 = gl.getUniformLocation(prog404,"prMatrix");


	   // ****** text object 405 ******
	   var prog405  = gl.createProgram();
	   gl.attachShader(prog405, getShader( gl, "vshader405" ));
	   gl.attachShader(prog405, getShader( gl, "fshader405" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog405, 0, "aPos");
	   gl.bindAttribLocation(prog405, 1, "aCol");
	   gl.linkProgram(prog405);
	   var texts = [
	    "y"
	   ];
	   var texinfo = drawTextToCanvas(texts, 1);	 
	   var canvasX405 = texinfo.canvasX;
	   var canvasY405 = texinfo.canvasY;
	   var ofsLoc405 = gl.getAttribLocation(prog405, "aOfs");
	   var texture405 = gl.createTexture();
	   var texLoc405 = gl.getAttribLocation(prog405, "aTexcoord");
	   var sampler405 = gl.getUniformLocation(prog405,"uSampler");
    	   handleLoadedTexture(texture405, document.getElementById("textureCanvas"));
	   var v=new Float32Array([
	    -0.2237768, -0.0388381, -0.5537158, 0, -0.5, 0.5, 0.5,
	    -0.2237768, -0.0388381, -0.5537158, 1, -0.5, 0.5, 0.5,
	    -0.2237768, -0.0388381, -0.5537158, 1, 1.5, 0.5, 0.5,
	    -0.2237768, -0.0388381, -0.5537158, 0, 1.5, 0.5, 0.5
	   ]);
	   for (var i=0; i<1; i++) 
	     for (var j=0; j<4; j++) {
	         ind = 7*(4*i + j) + 3;
	         v[ind+2] = 2*(v[ind]-v[ind+2])*texinfo.widths[i]/width;
	         v[ind+3] = 2*(v[ind+1]-v[ind+3])*texinfo.textHeight/height;
	         v[ind] *= texinfo.widths[i]/texinfo.canvasX;
	         v[ind+1] = 1.0-(texinfo.offset + i*texinfo.skip 
	           - v[ind+1]*texinfo.textHeight)/texinfo.canvasY;
	     }
	   var f=new Uint16Array([
	    0, 1, 2, 0, 2, 3
	   ]);
	   var buf405 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf405);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var ibuf405 = gl.createBuffer();
	   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf405);
	   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, f, gl.STATIC_DRAW);
	   var mvMatLoc405 = gl.getUniformLocation(prog405,"mvMatrix");
	   var prMatLoc405 = gl.getUniformLocation(prog405,"prMatrix");


	   // ****** text object 406 ******
	   var prog406  = gl.createProgram();
	   gl.attachShader(prog406, getShader( gl, "vshader406" ));
	   gl.attachShader(prog406, getShader( gl, "fshader406" ));
	   //  Force aPos to location 0, aCol to location 1 
	   gl.bindAttribLocation(prog406, 0, "aPos");
	   gl.bindAttribLocation(prog406, 1, "aCol");
	   gl.linkProgram(prog406);
	   var texts = [
	    "z"
	   ];
	   var texinfo = drawTextToCanvas(texts, 1);	 
	   var canvasX406 = texinfo.canvasX;
	   var canvasY406 = texinfo.canvasY;
	   var ofsLoc406 = gl.getAttribLocation(prog406, "aOfs");
	   var texture406 = gl.createTexture();
	   var texLoc406 = gl.getAttribLocation(prog406, "aTexcoord");
	   var sampler406 = gl.getUniformLocation(prog406,"uSampler");
    	   handleLoadedTexture(texture406, document.getElementById("textureCanvas"));
	   var v=new Float32Array([
	    -0.2237768, -0.5263161, 0.01743516, 0, -0.5, 0.5, 0.5,
	    -0.2237768, -0.5263161, 0.01743516, 1, -0.5, 0.5, 0.5,
	    -0.2237768, -0.5263161, 0.01743516, 1, 1.5, 0.5, 0.5,
	    -0.2237768, -0.5263161, 0.01743516, 0, 1.5, 0.5, 0.5
	   ]);
	   for (var i=0; i<1; i++) 
	     for (var j=0; j<4; j++) {
	         ind = 7*(4*i + j) + 3;
	         v[ind+2] = 2*(v[ind]-v[ind+2])*texinfo.widths[i]/width;
	         v[ind+3] = 2*(v[ind+1]-v[ind+3])*texinfo.textHeight/height;
	         v[ind] *= texinfo.widths[i]/texinfo.canvasX;
	         v[ind+1] = 1.0-(texinfo.offset + i*texinfo.skip 
	           - v[ind+1]*texinfo.textHeight)/texinfo.canvasY;
	     }
	   var f=new Uint16Array([
	    0, 1, 2, 0, 2, 3
	   ]);
	   var buf406 = gl.createBuffer();
	   gl.bindBuffer(gl.ARRAY_BUFFER, buf406);
	   gl.bufferData(gl.ARRAY_BUFFER, v, gl.STATIC_DRAW);
	   var ibuf406 = gl.createBuffer();
	   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf406);
	   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, f, gl.STATIC_DRAW);
	   var mvMatLoc406 = gl.getUniformLocation(prog406,"mvMatrix");
	   var prMatLoc406 = gl.getUniformLocation(prog406,"prMatrix");

	   gl.enable(gl.DEPTH_TEST);
	   gl.depthFunc(gl.LEQUAL);
	   gl.clearDepth(1.0);
	   gl.clearColor(1, 1, 1, 1);
	   var xOffs = yOffs = 0,  drag  = 0;
	   drawScene();

	   function drawScene(){
	     gl.depthMask(true);
	     gl.disable(gl.BLEND);
	     var radius = 0.625782;
	     var s = sin(fov*PI/360);
	     var t = tan(fov*PI/360);
	     var distance = radius/s;
	     var near = distance - radius;
	     var far = distance + radius;
	     var hlen = t*near;
	     var aspect = width/height;
	     prMatrix.makeIdentity();
	     if (aspect > 1)
	       prMatrix.frustum(-hlen*aspect*zoom, hlen*aspect*zoom, 
	                        -hlen*zoom, hlen*zoom, near, far);
	     else  
	       prMatrix.frustum(-hlen*zoom, hlen*zoom, 
	                        -hlen*zoom/aspect, hlen*zoom/aspect, 
	                        near, far);
	     mvMatrix.makeIdentity();
	     mvMatrix.translate( 0.095672, 0.0388381, -0.01743516 );
	     mvMatrix.scale( 1, 1, 1 );   
	     mvMatrix.multRight( userMatrix );  
	     mvMatrix.translate(0, 0, -distance);
	     gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);


	     // ****** lines object 396 *******
	     gl.useProgram(prog396);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf396);
	     gl.uniformMatrix4fv( prMatLoc396, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc396, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 1, 0, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 20);

	     // ****** lines object 397 *******
	     gl.useProgram(prog397);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf397);
	     gl.uniformMatrix4fv( prMatLoc397, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc397, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 1, 0, 0, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 20);

	     // ****** lines object 398 *******
	     gl.useProgram(prog398);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf398);
	     gl.uniformMatrix4fv( prMatLoc398, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc398, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 20);

	     // ****** lines object 399 *******
	     gl.useProgram(prog399);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf399);
	     gl.uniformMatrix4fv( prMatLoc399, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc399, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 0, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 10);

	     // ****** lines object 400 *******
	     gl.useProgram(prog400);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf400);
	     gl.uniformMatrix4fv( prMatLoc400, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc400, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 0, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 10);

	     // ****** lines object 401 *******
	     gl.useProgram(prog401);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf401);
	     gl.uniformMatrix4fv( prMatLoc401, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc401, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 0, 1 );
	     gl.lineWidth( 1 );
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 12,  0);
	     gl.drawArrays(gl.LINES, 0, 12);

	     // ****** text object 402 *******
	     gl.useProgram(prog402);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf402);
	     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf402);
	     gl.uniformMatrix4fv( prMatLoc402, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc402, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.enableVertexAttribArray( texLoc402 );
	     gl.vertexAttribPointer(texLoc402, 2, gl.FLOAT, false, 28, 12);
	     gl.activeTexture(gl.TEXTURE0);
	     gl.bindTexture(gl.TEXTURE_2D, texture402);
	     gl.uniform1i( sampler402, 0);
	     gl.enableVertexAttribArray( ofsLoc402 );
	     gl.vertexAttribPointer(ofsLoc402, 2, gl.FLOAT, false, 28, 20);
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 28,  0);
	     gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

	     // ****** text object 403 *******
	     gl.useProgram(prog403);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf403);
	     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf403);
	     gl.uniformMatrix4fv( prMatLoc403, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc403, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.enableVertexAttribArray( texLoc403 );
	     gl.vertexAttribPointer(texLoc403, 2, gl.FLOAT, false, 28, 12);
	     gl.activeTexture(gl.TEXTURE0);
	     gl.bindTexture(gl.TEXTURE_2D, texture403);
	     gl.uniform1i( sampler403, 0);
	     gl.enableVertexAttribArray( ofsLoc403 );
	     gl.vertexAttribPointer(ofsLoc403, 2, gl.FLOAT, false, 28, 20);
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 28,  0);
	     gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

	     // ****** text object 404 *******
	     gl.useProgram(prog404);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf404);
	     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf404);
	     gl.uniformMatrix4fv( prMatLoc404, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc404, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.enableVertexAttribArray( texLoc404 );
	     gl.vertexAttribPointer(texLoc404, 2, gl.FLOAT, false, 28, 12);
	     gl.activeTexture(gl.TEXTURE0);
	     gl.bindTexture(gl.TEXTURE_2D, texture404);
	     gl.uniform1i( sampler404, 0);
	     gl.enableVertexAttribArray( ofsLoc404 );
	     gl.vertexAttribPointer(ofsLoc404, 2, gl.FLOAT, false, 28, 20);
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 28,  0);
	     gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

	     // ****** text object 405 *******
	     gl.useProgram(prog405);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf405);
	     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf405);
	     gl.uniformMatrix4fv( prMatLoc405, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc405, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.enableVertexAttribArray( texLoc405 );
	     gl.vertexAttribPointer(texLoc405, 2, gl.FLOAT, false, 28, 12);
	     gl.activeTexture(gl.TEXTURE0);
	     gl.bindTexture(gl.TEXTURE_2D, texture405);
	     gl.uniform1i( sampler405, 0);
	     gl.enableVertexAttribArray( ofsLoc405 );
	     gl.vertexAttribPointer(ofsLoc405, 2, gl.FLOAT, false, 28, 20);
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 28,  0);
	     gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

	     // ****** text object 406 *******
	     gl.useProgram(prog406);
	     gl.bindBuffer(gl.ARRAY_BUFFER, buf406);
	     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibuf406);
	     gl.uniformMatrix4fv( prMatLoc406, false, new Float32Array(prMatrix.getAsArray()) );
	     gl.uniformMatrix4fv( mvMatLoc406, false, new Float32Array(mvMatrix.getAsArray()) );
	     gl.enableVertexAttribArray( posLoc );
	     gl.disableVertexAttribArray( colLoc );
	     gl.vertexAttrib4f( colLoc, 0, 0, 1, 1 );
	     gl.enableVertexAttribArray( texLoc406 );
	     gl.vertexAttribPointer(texLoc406, 2, gl.FLOAT, false, 28, 12);
	     gl.activeTexture(gl.TEXTURE0);
	     gl.bindTexture(gl.TEXTURE_2D, texture406);
	     gl.uniform1i( sampler406, 0);
	     gl.enableVertexAttribArray( ofsLoc406 );
	     gl.vertexAttribPointer(ofsLoc406, 2, gl.FLOAT, false, 28, 20);
	     gl.vertexAttribPointer(posLoc,  3, gl.FLOAT, false, 28,  0);
	     gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

	     gl.flush ();
	   }

	   var vlen = function(v) {
	     return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2])
	   }
	   
	   var xprod = function(a, b) {
	     return [a[1]*b[2] - a[2]*b[1],
	             a[2]*b[0] - a[0]*b[2],
	             a[0]*b[1] - a[1]*b[0]];
	   }

	   var screenToVector = function(x, y) {
	     var radius = max(width, height)/2.0;
	     var cx = width/2.0;
	     var cy = height/2.0;
	     var px = (x-cx)/radius;
	     var py = (y-cy)/radius;
	     var plen = sqrt(px*px+py*py);
	     if (plen > 1.e-6) { 
	       px = px/plen;
	       py = py/plen;
	     }

	     var angle = (SQRT2 - plen)/SQRT2*PI/2;
	     var z = sin(angle);
	     var zlen = sqrt(1.0 - z*z);
	     px = px * zlen;
	     py = py * zlen;
	     return [px, py, z];
	   }

	   var rotBase;

	   var trackballdown = function(x,y) {
	     rotBase = screenToVector(x, y);
	     saveMat.load(userMatrix);
	   }
	   
	   var trackballmove = function(x,y) {
	     var rotCurrent = screenToVector(x,y);
	     var dot = rotBase[0]*rotCurrent[0] + 
	   	       rotBase[1]*rotCurrent[1] + 
	   	       rotBase[2]*rotCurrent[2];
	     var angle = acos( dot/vlen(rotBase)/vlen(rotCurrent) )*180./PI;
	     var axis = xprod(rotBase, rotCurrent);
	     userMatrix.load(saveMat);
	     userMatrix.rotate(angle, axis[0], axis[1], axis[2]);
	     drawScene();
	   }

	   var y0fov = 0;
	   var fov0 = 1;
	   var fovdown = function(x, y) {
	     y0fov = y;
	     fov0 = fov;
	   }

	   var fovmove = function(x, y) {
	     fov = max(1, min(179, fov0 + 180*(y-y0fov)/height));
	     drawScene();
	   }

	   var y0zoom = 0;
	   var zoom0 = 1;
	   var zoomdown = function(x, y) {
	     y0zoom = y;
	     zoom0 = log(zoom);
	   }

	   var zoommove = function(x, y) {
	     zoom = exp(zoom0 + (y-y0zoom)/height);
	     drawScene();
	   }

	   var mousedown = [trackballdown, fovdown, zoomdown];
	   var mousemove = [trackballmove, fovmove, zoommove];

	   function relMouseCoords(event){
	     var totalOffsetX = 0;
	     var totalOffsetY = 0;
	     var currentElement = canvas;
	   
	     do{
	       totalOffsetX += currentElement.offsetLeft;
	       totalOffsetY += currentElement.offsetTop;
	     }
	     while(currentElement = currentElement.offsetParent)
	   
	     var canvasX = event.pageX - totalOffsetX;
	     var canvasY = event.pageY - totalOffsetY;
	   
	     return {x:canvasX, y:canvasY}
	   }

	   canvas.onmousedown = function ( ev ){
	     if (!ev.which) // Use w3c defns in preference to MS
	       switch (ev.button) {
	       case 0: ev.which = 1; break;
	       case 1: 
	       case 4: ev.which = 2; break;
	       case 2: ev.which = 3;
	     }
	     drag = ev.which;
	     var f = mousedown[drag-1];
	     if (f) {
	       var coords = relMouseCoords(ev);
	       f(coords.x, height-coords.y); 
	       ev.preventDefault();
	     }
	   }    

	   canvas.onmouseup = function ( ev ){	
	     drag = 0;
	   }
	   
	   canvas.onmouseout = canvas.onmouseup;

	   canvas.onmousemove = function ( ev ){
	     if ( drag == 0 ) return;
	     var f = mousemove[drag-1];
	     if (f) {
	       var coords = relMouseCoords(ev);
	       f(coords.x, height-coords.y);
	     }
	   }

	   var wheelHandler = function(ev) {
	     var del = 1.1;
	     if (ev.shiftKey) del = 1.01;
	     var ds = ((ev.detail || ev.wheelDelta) > 0) ? del : (1 / del);
	     zoom *= ds;
	     drawScene();
	     ev.preventDefault();
	   };
	   canvas.addEventListener("DOMMouseScroll", wheelHandler, false);
	   canvas.addEventListener("mousewheel", wheelHandler, false);

	}
	</script>

	<canvas id="PC123" width="1" height="1"></canvas> 
        <p id="debug">
	<img src="webgl/PC123/snapshot.png" alt="snapshot" width=257/><br>
	You must enable Javascript to view this page properly.</p>
